{"version":3,"sources":["../../src/components/table.tsx"],"sourcesContent":["// (C) 2025 Polypass <legal@polypass.ca>. All rights reserved.\n\n\"use client\";\n\nimport {\n  Button,\n  Chip,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownTrigger,\n  Input,\n  Pagination,\n  Selection,\n  SortDescriptor,\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow,\n} from \"@heroui/react\";\nimport { CaretDown, MagnifyingGlass, PlusCircle } from \"@phosphor-icons/react\";\nimport React, { FC, ReactNode } from \"react\";\n\ntype TableViewProps = {\n  data: Record<string, string>[];\n  columns: { name: string; uid: string; sortable?: boolean }[];\n  emptyContent?: string;\n  label: string;\n  onAdd?: () => void;\n  cellProcessor?: (\n    item: Record<string, string>,\n    column: string | number\n  ) => ReactNode;\n};\n\nexport const TableView: FC<TableViewProps> = ({\n  data,\n  columns,\n  emptyContent,\n  label,\n  onAdd,\n  cellProcessor,\n}) => {\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n    new Set([])\n  );\n  const [visibleColumns, setVisibleColumns] = React.useState<Selection>(\n    new Set(columns.map((col) => col.uid))\n  );\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n    column: columns[0].uid,\n    direction: \"ascending\",\n  });\n  const [page, setPage] = React.useState(1);\n  const pages = Math.ceil(data.length / rowsPerPage);\n\n  const headerColumns = React.useMemo(() => {\n    return visibleColumns === \"all\"\n      ? columns\n      : columns.filter((col) => Array.from(visibleColumns).includes(col.uid));\n  }, [visibleColumns]);\n\n  const items = React.useMemo(() => {\n    const pageStartIdx = (page - 1) * rowsPerPage;\n    return data\n      .filter(\n        (item) =>\n          !searchQuery ||\n          item[columns[0].uid].toLowerCase().includes(searchQuery.toLowerCase())\n      ) // filter by search query\n      .slice(pageStartIdx, pageStartIdx + rowsPerPage); // filter by page\n  }, [page, searchQuery, rowsPerPage]);\n\n  const sortedItems = React.useMemo(\n    () =>\n      [...items].sort((a, b) => {\n        const [first, second] = [\n          a[sortDescriptor.column],\n          b[sortDescriptor.column],\n        ];\n        return (\n          (first < second ? -1 : first > second ? 1 : 0) *\n          (sortDescriptor.direction === \"descending\" ? -1 : 1)\n        );\n      }),\n    [sortDescriptor, items]\n  );\n\n  const topContent = React.useMemo(() => {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex gap-2 items-center\">\n            <h1 className=\"text-2xl font-bold\">{label}s</h1>\n            <Chip\n              size=\"sm\"\n              className=\"bg-slate-200 text-slate-600 dark:bg-slate-800 dark:text-slate-400\"\n            >\n              {data.length}\n            </Chip>\n          </div>\n          <Button\n            color=\"primary\"\n            endContent={<PlusCircle weight=\"fill\" size={18} />}\n            onPress={onAdd}\n          >\n            Add {label}\n          </Button>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex justify-between gap-3\">\n            <Input\n              isClearable\n              placeholder={`Search by ${columns[0].name.toLowerCase()}...`}\n              size=\"sm\"\n              startContent={<MagnifyingGlass className=\"text-default-300\" />}\n              value={searchQuery}\n              onClear={() => setSearchQuery(\"\")}\n              onValueChange={(value?: string) => {\n                if (value) {\n                  setSearchQuery(value);\n                  setPage(1);\n                } else setSearchQuery(\"\");\n              }}\n            />\n            <div className=\"flex gap-3\">\n              <Dropdown>\n                <DropdownTrigger>\n                  <Button\n                    endContent={<CaretDown className=\"text-small\" />}\n                    size=\"sm\"\n                    variant=\"flat\"\n                  >\n                    Columns\n                  </Button>\n                </DropdownTrigger>\n                <DropdownMenu\n                  disallowEmptySelection\n                  aria-label=\"Table Columns\"\n                  closeOnSelect={false}\n                  selectedKeys={visibleColumns}\n                  selectionMode=\"multiple\"\n                  onSelectionChange={setVisibleColumns}\n                >\n                  {columns.map((column) => (\n                    <DropdownItem key={column.uid} className=\"capitalize\">\n                      {column.name}\n                    </DropdownItem>\n                  ))}\n                </DropdownMenu>\n              </Dropdown>\n            </div>\n          </div>\n          <label className=\"flex items-center text-default-400 text-small\">\n            Rows per page:\n            <select\n              className=\"bg-transparent outline-none text-default-400 text-small\"\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                setRowsPerPage(Number(e.target.value));\n                setPage(1);\n              }}\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    );\n  }, [searchQuery, visibleColumns, data.length]);\n\n  const bottomContent = React.useMemo(() => {\n    return (\n      <div className=\"flex justify-between items-center\">\n        <Pagination\n          showControls\n          isCompact\n          isDisabled={!!searchQuery}\n          page={page}\n          total={pages}\n          onChange={setPage}\n        />\n        <span className=\"text-small text-default-400\">\n          {selectedKeys === \"all\"\n            ? \"All items selected\"\n            : `${selectedKeys.size} of ${items.length} selected`}\n        </span>\n      </div>\n    );\n  }, [selectedKeys, items.length, page, pages, searchQuery]);\n\n  return (\n    <Table\n      isCompact\n      isStriped\n      bottomContent={bottomContent}\n      bottomContentPlacement=\"outside\"\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      sortDescriptor={sortDescriptor}\n      topContent={topContent}\n      topContentPlacement=\"outside\"\n      onSelectionChange={setSelectedKeys}\n      onSortChange={setSortDescriptor}\n    >\n      <TableHeader columns={headerColumns}>\n        {(column) => (\n          <TableColumn\n            key={column.uid}\n            align={column.uid === \"actions\" ? \"center\" : \"start\"}\n            allowsSorting={column.sortable}\n          >\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody\n        emptyContent={emptyContent || \"No data found.\"}\n        items={sortedItems}\n      >\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => (\n              <TableCell>\n                {cellProcessor\n                  ? cellProcessor(item, columnKey)\n                  : item[columnKey]}\n              </TableCell>\n            )}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n"],"mappings":"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","names":[]}